// @generated by protobuf-ts 2.11.0
// @generated from protobuf file "tracer.proto" (package "tfc.tracer", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Struct } from "./google/protobuf/struct";
/**
 * @generated from protobuf message tfc.tracer.CreateOtelSpanRequest
 */
export interface CreateOtelSpanRequest {
    /**
     * @generated from protobuf field: repeated google.protobuf.Struct otel_data_list = 1
     */
    otelDataList: Struct[];
}
/**
 * @generated from protobuf message tfc.tracer.CreateOtelSpanResponse
 */
export interface CreateOtelSpanResponse {
    /**
     * @generated from protobuf field: repeated string ids = 1
     */
    ids: string[];
}
// @generated message type with reflection information, may provide speed optimized methods
class CreateOtelSpanRequest$Type extends MessageType<CreateOtelSpanRequest> {
    constructor() {
        super("tfc.tracer.CreateOtelSpanRequest", [
            { no: 1, name: "otel_data_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Struct }
        ]);
    }
    create(value?: PartialMessage<CreateOtelSpanRequest>): CreateOtelSpanRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.otelDataList = [];
        if (value !== undefined)
            reflectionMergePartial<CreateOtelSpanRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateOtelSpanRequest): CreateOtelSpanRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated google.protobuf.Struct otel_data_list */ 1:
                    message.otelDataList.push(Struct.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateOtelSpanRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated google.protobuf.Struct otel_data_list = 1; */
        for (let i = 0; i < message.otelDataList.length; i++)
            Struct.internalBinaryWrite(message.otelDataList[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tfc.tracer.CreateOtelSpanRequest
 */
export const CreateOtelSpanRequest = new CreateOtelSpanRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateOtelSpanResponse$Type extends MessageType<CreateOtelSpanResponse> {
    constructor() {
        super("tfc.tracer.CreateOtelSpanResponse", [
            { no: 1, name: "ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateOtelSpanResponse>): CreateOtelSpanResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.ids = [];
        if (value !== undefined)
            reflectionMergePartial<CreateOtelSpanResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateOtelSpanResponse): CreateOtelSpanResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string ids */ 1:
                    message.ids.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateOtelSpanResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string ids = 1; */
        for (let i = 0; i < message.ids.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.ids[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tfc.tracer.CreateOtelSpanResponse
 */
export const CreateOtelSpanResponse = new CreateOtelSpanResponse$Type();
/**
 * @generated ServiceType for protobuf service tfc.tracer.ObservationSpanController
 */
export const ObservationSpanController = new ServiceType("tfc.tracer.ObservationSpanController", [
    { name: "CreateOtelSpan", options: {}, I: CreateOtelSpanRequest, O: CreateOtelSpanResponse }
]);
